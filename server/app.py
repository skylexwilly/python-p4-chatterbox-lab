from flask import Flask, request, jsonify
from flask_migrate import Migrate
from models import db, Message

app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///app.db'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

migrate = Migrate(app, db)
db.init_app(app)


@app.route('/')
def index():
    return '<h1>Chatterbox</h1>'


@app.route('/messages', methods=['GET'])
def get_messages():
    messages = Message.query.all()
    return jsonify([message.to_dict() for message in messages])


@app.route('/messages', methods=['POST'])
def create_message():
    data = request.get_json()

    new_message = Message(
        body=data.get("body"),
        username=data.get("username")
    )

    db.session.add(new_message)
    db.session.commit()

    return jsonify(new_message.to_dict()), 201


@app.route('/messages/<int:id>', methods=['PATCH'])
def update_message(id):
    message = db.session.get(Message, id)  # ✅ fixed
    if not message:
        return jsonify({"error": "Message not found"}), 404

    data = request.get_json()
    if "body" in data:
        message.body = data["body"]

    db.session.commit()
    return jsonify(message.to_dict()), 200


@app.route('/messages/<int:id>', methods=['DELETE'])
def delete_message(id):
    message = db.session.get(Message, id)  # ✅ fixed
    if not message:
        return jsonify({"error": "Message not found"}), 404

    db.session.delete(message)
    db.session.commit()
    return jsonify({"message": "Deleted"}), 200


if __name__ == '__main__':
    app.run(port=5555, debug=True)

# === server/README_instructions.txt ===
# Quick setup & test commands (run from project root):
# 1. enter virtualenv and install dependencies (as described in lab):
#    pipenv install && pipenv shell
# 2. cd server
# 3. initialize the migrations folder (only once):
#    flask db init
# 4. create an autogenerated migration for the Message model:
#    flask db revision --autogenerate -m "create messages"
# 5. apply the migration:
#    flask db upgrade
# 6. seed the DB (creates example messages):
#    python seed.py
# 7. run the server:
#    python app.py
# 8. run the tests for the backend (from server/):
#    pytest -x

# Notes:
# - If pytest shows failures, copy the failing traceback here and I'll help fix them.
# - If your environment uses a different FLASK_APP entrypoint, set it as needed, e.g.:
#    export FLASK_APP=app.py
# - The API endpoints implemented in app.py are exactly the ones the React client expects:
#    GET    /messages
#    POST   /messages
#    PATCH  /messages/<id>
#    DELETE /messages/<id>
